# In all below tasks create your own toy objects i.e. named vectors, non-empty vectors and lists etc.
#
# Task 1: Write a R program to create a blank matrix.
a <- matrix(NA, nrow = 3, ncol = 3)
a
# Task 2: Write a R program to create a matrix taking a given vector of numbers as input. Display the matrix.
a <- matrix(1:16, 3, 3)
a
# Task 3: Write a R program to create a matrix taking a given vector of numbers as input and define the column and row names. Display the matrix.
colnames(a) <- letters[1:3]
a
rownames(a) <- letters[4:6]
a
# Task 4: Write a R program to access the element at 3rd column and 2nd row, only the 3rd row and only the 4th column of a given matrix.
a <- matrix(1:16, 4, 4)
a
a[2,3]
a[3,]
a[,4]
# Task 5: Write a R program to create two 2x3 matrix and add, subtract, multiply and divide the matrixes.
a <- matrix(1:6, 2, 3)
a
b <- matrix(7:12, 2, 3)
a+b
a*b
a-b
a/b
# Task 6: Write a R program to create a matrix from a list of given vectors.
vector <- list(c(1:3), c(4:6), c(7:9))
vector
rnum <- length(vector)
cnum <- length(vector[[1]])
matr <- matrix(0, nrow = rnum, ncol = cnum)
for (i in 1:rnum) {
matr[i, ] <- vector[[i]]
}
matr
# Task 8: Write a R program to convert a given matrix to a list of column-vectors.
matr
split(matr, rep(1:ncol(matr), each = nrow(matr)))
# Task 9: Write a R program to find row and column index of maximum and minimum value in a given matrix.
resultMax <- which(matr == max(matr), arr.ind = T)
resultMin <- which(matr == min(matr), arr.ind = T)
# Task 10: Write a R program to rotate a given matrix 90 degree clockwise rotation.
t(apply(matr, 2, rev))
matr
# Task 11: Write a R program to concatenate two given matrices of same column but different rows.
rbind(a,b)
# Task 12: Write a R program to convert a given matrix to a 1 dimensional array.
as.vector(matr)
# Task 13: Write a R program to create an 3 dimensional array of 24 elements using the dim() function.
v =  sample(1:5,24,replace = TRUE)
dim(v) = c(4,2,3)
v
# Task 14: Write a R program to create an array of two 3x3 matrices each with 3 rows and 3 columns from two given two vectors. Print the second row of the second matrix of the array and the element in the 3rd row and 3rd column of the 1st matrix.
v1 <- c(1, 2, 6, 7, 8)
v2 <- c(4, 7, 8, 9)
v3 <- array(c(v1, v2), dim = c(3, 3, 2))
v3
# Task 15: Write a R program to create an array using four given columns, three given rows, and two given tables and display the content of the array..
array(NA, dim = c(3, 3, 2))
# Task 16: Write a R program to create a two-dimensional 5x3 array of sequence of even integers greater than 50.
a <- array(seq(from = 50, length.out = 15, by = 2), dim = c(5,3))
# Task 17: Write a R program to create an empty data frame.
data.frame(NULL)
# Task 18: Write a R program to create a data frame from four given vectors.
v1 <- c(1, 2, 6, 7, 8)
v2 <- c(4, 7, 8, 9, 6)
v3 <- letters[1:5]
v4 <- letters[5:9]
df <- data.frame(v1, v2, v3, v4)
# Task 19: Write a R program to get the structure of a given data frame.
str(df)
# Task 20: Write a R program to get the statistical summary and nature of the data of a given data frame.
summary(df)
# Task 21: Write a R program to extract 3rd and 5th rows with 1st and 3rd columns from a given data frame.
df[c(3,5), c(1,3)]
# Task 22: Write a R program to add a new column in a given data frame.
df$v5 <- letters[10:14]
df
# Task 23: Write a R program to drop column(s) by name from a given data frame.
subset(df, select = -c(v5))
# Task 24: Write a R program to sort a given data frame by multiple column(s).
with(df, df[order(v1,v3)])
# Task 25: Write a R program to create inner, outer, left, right join(merge) from given two data frames.
a <- data.frame(name = c(1:5))
b <- data.frame(name = c(3:7))
#left outer join
merge(a,b, by = "name", all.x = T)
#right outer join
merge(a, b, by = "name", all.y = T)
merge(a, b, by = "name")
# Task 26: Write a R program to replace NA values with 3 in a given data frame.
r <- data.frame(id = c(1, 2, NA, 5, 7))
r
r[is.na(r)] <- 3
r
# Task 27: Write a R program to compare two data frames to find the elements in first data frame that are not present in second data frame.
setdiff(a,b)
# Task 28: Write a R program to count the number of NA values in a data frame column.
sum(is.na(r))
ab <- c(1:10)
ab
a <- letters(1:5)
a <- c(1,2,3)
a
a <- letter(1:5)
LETTERS
letters
letters(1)
letters[1:5]
stats <- read.csv(file.choose())
stats
getwd()
setwd("/Users/andimutiazz/Documents/PROJECT/course/R/sec5")
getwd()
rm(stats)
stats <- read.csv("/Users/andimutiazz/Documents/PROJECT/course/R/sec5/P2-Demographic-Data.csv")
stats
View(stats)
#-----------------------Exploring data
nrow(stats)
ncol(stats)
head(stats)
tail(stats)
head(stats, n=5)
str(stats)
?levels
summary(stats)
levels(stats)
levels(stats$Income.Group)
levels(stats$Income.Group) <- C(1:4)
levels(stats$Income.Group) <- c(1:4)
levels(stats$Income.Group)
str(stats)
levels(stats$Income.Group) <- c(1:4)
levels(stats$Income.Group)
str(stats)
levels(stats$Income.Group == "High income") <- 1
dist(stats$Income.Group)
unique(stats)
unique(stats$Income.Group)
levels(stats$Income.Group) <- list(1 = "High income", 2 = "Upper middle income", 3 = "Lower middle income", 4 = "Lower middle income") )
str(stats$Income.Group)
stats$Income.Group <- factor(stats$Income.Group)
str(stats$Income.Group)
str(stats)
#-----------------------Using $ sign
stats[3, 3]
stats$Country.Name
stats$Country.Name[5]
stats$Country.Name[1:15]
stats[,3]
levels(stats$Income.Group)
#----------------------Basic operation in df
stats[1:10]
#----------------------Basic operation in df
stats[1:10,]
stats[1,]
is.data.frame(stats[1,])
is.vector(stats[1,])
is.factor(stats[1,])
stats[,1]
is.data.frame(stats[,1])
is.vector(stats[,1])
stats[,1, drop=F]
is.data.frame(stats[,1, drop=F])
#multiple column
stats$Birth.rate * stats$Internet.users
#add column
head(stats)
stats$cal <- stats$Birth.rate * stats$Internet.users
stats$Birth.rate * stats$Internet.users
stats$cal <- stats$Birth.rate * stats$Internet.users
stats$Calc <- stats$Birth.rate * stats$Internet.users
stats$Birth.rate*stats$Internet.users
dim(stats)
summary(stats$Birth.rate)
str(stats)
rm(stats$cal)
str(stats)
rm(stats[,"cal"])
stats$cal <- NULL
stats$cal <- NULL
str(stats)
stats[1:10,]
#-----Filtering Dataframe
head(stats)
stats$Internet.users
stats$Internet.users(head())
stats$Internet.users < 2
fiter <- stats$Internet.users < 2
stats[filter,]
filter <- stats$Internet.users < 2
stats[filter,]
filter <- stats$Internet.users < 2
stats[filter,]
stats[stats$Internet.users < 2,]
stats[stats$Birth.rate > 40,]
stats[stats$Birth.rate >= 40,]
stats[stats$Birth.rate >= 40 & stats$Internet.users < 2,]
stats[stats$Income.Group == "High income",]
stats[stats$Country.Name == "Malta",]
?qplot
install.packages("ggplot2")
library(ggplot2)
?qplot
qplot(data = stats, )
qplot(data = stats, x = Internet.users)
qplot(data = stats, x = Income.Group, y = Birth.rate)
qplot(data = stats, x = Income.group, y = Birth.rate)
qplot(data = stats, x = Income.Group, y = Birth.rate)
qplot(data = stats, x = Income.Group, y = Birth.rate, size = 3)
qplot(data = stats, x = Income.Group, y = Birth.rate, size = 10)
qplot(data = stats, x = Income.Group, y = Birth.rate, size = I(10)I
qplot(data = stats, x = Income.Group, y = Birth.rate, size = I(10))
qplot(data = stats, x = Income.Group, y = Birth.rate, size = I(2))
qplot(data = stats, x = Income.Group, y = Birth.rate, size = I(2), color = I("blue"))
qplot(data = stats, x = Income.Group, y = Birth.rate, size = I(2), color = I("red"))
qplot(data = stats, x = Income.Group, y = Birth.rate, size = I(2), color = I("yellow"))
qplot(data = stats, x = Income.Group, y = Birth.rate, size = I(2), color = I("pink"))
qplot(data = stats, x = Income.Group, y = Birth.rate, size = I(2), color = I("pink"), geom = "boxplot")
qplot(data = stats, x = Income.Group, y = Birth.rate, size = I(2), color = I("pink"), geom = "scatterplot")
qplot(data = stats, x = Income.Group, y = Birth.rate, size = I(2), color = I("pink"), geom = "boxplot")
qplot(data = stats, x = Income.Group, y = Birth.rate, size = I(1), color = I("pink"), geom = "boxplot")
qplot(data = stats, x = Internet.users, y = Birth.rate)
qplot(data = stats, x = Internet.users, y = Birth.rate,
size = I(4))
qplot(data = stats, x = Internet.users, y = Birth.rate,
size = I(2))
qplot(data = stats, x = Internet.users, y = Birth.rate,
size = I(1))
qplot(data = stats, x = Internet.users, y = Birth.rate,
size = I(1), color = I("brown"))
qplot(data = stats, x = Internet.users, y = Birth.rate,
size = I(1), color = I("blue"))
qplot(data = stats, x = Internet.users, y = Birth.rate,
size = I(1), color = Income.Group)
#Execute below code to generate three new vectors
Countries_2012_Dataset <- c("Aruba","Afghanistan","Angola","Albania","United Arab Emirates","Argentina","Armenia","Antigua and Barbuda","Australia","Austria","Azerbaijan","Burundi","Belgium","Benin","Burkina Faso","Bangladesh","Bulgaria","Bahrain","Bahamas, The","Bosnia and Herzegovina","Belarus","Belize","Bermuda","Bolivia","Brazil","Barbados","Brunei Darussalam","Bhutan","Botswana","Central African Republic","Canada","Switzerland","Chile","China","Cote d'Ivoire","Cameroon","Congo, Rep.","Colombia","Comoros","Cabo Verde","Costa Rica","Cuba","Cayman Islands","Cyprus","Czech Republic","Germany","Djibouti","Denmark","Dominican Republic","Algeria","Ecuador","Egypt, Arab Rep.","Eritrea","Spain","Estonia","Ethiopia","Finland","Fiji","France","Micronesia, Fed. Sts.","Gabon","United Kingdom","Georgia","Ghana","Guinea","Gambia, The","Guinea-Bissau","Equatorial Guinea","Greece","Grenada","Greenland","Guatemala","Guam","Guyana","Hong Kong SAR, China","Honduras","Croatia","Haiti","Hungary","Indonesia","India","Ireland","Iran, Islamic Rep.","Iraq","Iceland","Israel","Italy","Jamaica","Jordan","Japan","Kazakhstan","Kenya","Kyrgyz Republic","Cambodia","Kiribati","Korea, Rep.","Kuwait","Lao PDR","Lebanon","Liberia","Libya","St. Lucia","Liechtenstein","Sri Lanka","Lesotho","Lithuania","Luxembourg","Latvia","Macao SAR, China","Morocco","Moldova","Madagascar","Maldives","Mexico","Macedonia, FYR","Mali","Malta","Myanmar","Montenegro","Mongolia","Mozambique","Mauritania","Mauritius","Malawi","Malaysia","Namibia","New Caledonia","Niger","Nigeria","Nicaragua","Netherlands","Norway","Nepal","New Zealand","Oman","Pakistan","Panama","Peru","Philippines","Papua New Guinea","Poland","Puerto Rico","Portugal","Paraguay","French Polynesia","Qatar","Romania","Russian Federation","Rwanda","Saudi Arabia","Sudan","Senegal","Singapore","Solomon Islands","Sierra Leone","El Salvador","Somalia","Serbia","South Sudan","Sao Tome and Principe","Suriname","Slovak Republic","Slovenia","Sweden","Swaziland","Seychelles","Syrian Arab Republic","Chad","Togo","Thailand","Tajikistan","Turkmenistan","Timor-Leste","Tonga","Trinidad and Tobago","Tunisia","Turkey","Tanzania","Uganda","Ukraine","Uruguay","United States","Uzbekistan","St. Vincent and the Grenadines","Venezuela, RB","Virgin Islands (U.S.)","Vietnam","Vanuatu","West Bank and Gaza","Samoa","Yemen, Rep.","South Africa","Congo, Dem. Rep.","Zambia","Zimbabwe")
Codes_2012_Dataset <- c("ABW","AFG","AGO","ALB","ARE","ARG","ARM","ATG","AUS","AUT","AZE","BDI","BEL","BEN","BFA","BGD","BGR","BHR","BHS","BIH","BLR","BLZ","BMU","BOL","BRA","BRB","BRN","BTN","BWA","CAF","CAN","CHE","CHL","CHN","CIV","CMR","COG","COL","COM","CPV","CRI","CUB","CYM","CYP","CZE","DEU","DJI","DNK","DOM","DZA","ECU","EGY","ERI","ESP","EST","ETH","FIN","FJI","FRA","FSM","GAB","GBR","GEO","GHA","GIN","GMB","GNB","GNQ","GRC","GRD","GRL","GTM","GUM","GUY","HKG","HND","HRV","HTI","HUN","IDN","IND","IRL","IRN","IRQ","ISL","ISR","ITA","JAM","JOR","JPN","KAZ","KEN","KGZ","KHM","KIR","KOR","KWT","LAO","LBN","LBR","LBY","LCA","LIE","LKA","LSO","LTU","LUX","LVA","MAC","MAR","MDA","MDG","MDV","MEX","MKD","MLI","MLT","MMR","MNE","MNG","MOZ","MRT","MUS","MWI","MYS","NAM","NCL","NER","NGA","NIC","NLD","NOR","NPL","NZL","OMN","PAK","PAN","PER","PHL","PNG","POL","PRI","PRT","PRY","PYF","QAT","ROU","RUS","RWA","SAU","SDN","SEN","SGP","SLB","SLE","SLV","SOM","SRB","SSD","STP","SUR","SVK","SVN","SWE","SWZ","SYC","SYR","TCD","TGO","THA","TJK","TKM","TLS","TON","TTO","TUN","TUR","TZA","UGA","UKR","URY","USA","UZB","VCT","VEN","VIR","VNM","VUT","PSE","WSM","YEM","ZAF","COD","ZMB","ZWE")
Regions_2012_Dataset <- c("The Americas","Asia","Africa","Europe","Middle East","The Americas","Asia","The Americas","Oceania","Europe","Asia","Africa","Europe","Africa","Africa","Asia","Europe","Middle East","The Americas","Europe","Europe","The Americas","The Americas","The Americas","The Americas","The Americas","Asia","Asia","Africa","Africa","The Americas","Europe","The Americas","Asia","Africa","Africa","Africa","The Americas","Africa","Africa","The Americas","The Americas","The Americas","Europe","Europe","Europe","Africa","Europe","The Americas","Africa","The Americas","Africa","Africa","Europe","Europe","Africa","Europe","Oceania","Europe","Oceania","Africa","Europe","Asia","Africa","Africa","Africa","Africa","Africa","Europe","The Americas","The Americas","The Americas","Oceania","The Americas","Asia","The Americas","Europe","The Americas","Europe","Asia","Asia","Europe","Middle East","Middle East","Europe","Middle East","Europe","The Americas","Middle East","Asia","Asia","Africa","Asia","Asia","Oceania","Asia","Middle East","Asia","Middle East","Africa","Africa","The Americas","Europe","Asia","Africa","Europe","Europe","Europe","Asia","Africa","Europe","Africa","Asia","The Americas","Europe","Africa","Europe","Asia","Europe","Asia","Africa","Africa","Africa","Africa","Asia","Africa","Oceania","Africa","Africa","The Americas","Europe","Europe","Asia","Oceania","Middle East","Asia","The Americas","The Americas","Asia","Oceania","Europe","The Americas","Europe","The Americas","Oceania","Middle East","Europe","Europe","Africa","Middle East","Africa","Africa","Asia","Oceania","Africa","The Americas","Africa","Europe","Africa","Africa","The Americas","Europe","Europe","Europe","Africa","Africa","Middle East","Africa","Africa","Asia","Asia","Asia","Asia","Oceania","The Americas","Africa","Europe","Africa","Africa","Europe","The Americas","The Americas","Asia","The Americas","The Americas","The Americas","Asia","Oceania","Middle East","Oceania","Middle East","Africa","Africa","Africa","Africa")
#(c) Kirill Eremenko, www.superdatascience.com
mydf <- data.frame(rbind(Countries_2012_Dataset,Codes_2012_Dataset, Regions_2012_Dataset))
mydf
View(mydf)
View(mydf)
mydf <- data.frame(Countries_2012_Dataset,Codes_2012_Dataset, Regions_2012_Dataset)
View(mydf)
View(mydf)
mydf
colnames(mydf) <- c("Country", "Code", "Region")
mydf
head(mydf)
mydf <- data.frame(Country = Countries_2012_Dataset, Code = Codes_2012_Dataset, Region = Regions_2012_Dataset)
mydf
head(mydf)
tail(mydf)
summary(mydf)
qplot(data = c(stats, mydf), x = Internet.users, y = Birth.rate, color = Region)
qplot(data = cbind(stats, mydf), x = Internet.users, y = Birth.rate, color = Region)
head(mydf)
head(stats)
merged <- merge(stats, mydf, by.x = "Country.Code", by.y =
"Code")
head(merged)
merged$Country <- NULL
str(merged)
merged$Country <- NULL
str(merged)
merged$Country <- NULL
merged$Calc <- NULL
MERGED
head(merged)
str(merged)
qplot(data = merged, x = Internet.users, y = Birth.rate, color = Region)
qplot(data = merged, x = Internet.users, y = Birth.rate,
color = Region, size = I(2))
qplot(data = merged, x = Internet.users, y = Birth.rate,
color = Region, size = I(1))
qplot(data = merged, x = Internet.users, y = Birth.rate,
color = Region, size = I(1), shape = I(17))
qplot(data = merged, x = Internet.users, y = Birth.rate,
color = Region, size = I(1), shape = I(1))
qplot(data = merged, x = Internet.users, y = Birth.rate,
color = Region, size = I(1), shape = I(3))
qplot(data = merged, x = Internet.users, y = Birth.rate,
color = Region, size = I(1), shape = I(2))
qplot(data = merged, x = Internet.users, y = Birth.rate,
color = Region, size = I(1), shape = I(15))
qplot(data = merged, x = Internet.users, y = Birth.rate,
color = Region, size = I(1), shape = I(10))
qplot(data = merged, x = Internet.users, y = Birth.rate,
color = Region, size = I(1), shape = I(23))
#transparency
qplot(data = merged, x = Internet.users, y = Birth.rate,
color = Region, size = I(1), shape = I(23), alpha = I(0.6))
#transparency
qplot(data = merged, x = Internet.users, y = Birth.rate,
color = Region, size = I(1), shape = I(1), alpha = I(0.6))
#transparency
qplot(data = merged, x = Internet.users, y = Birth.rate,
color = Region, size = I(1), shape = I(15), alpha = I(0.6))
#transparency
qplot(data = merged, x = Internet.users, y = Birth.rate,
color = Region, size = I(1), shape = I(15), alpha = I(0.1))
#transparency
qplot(data = merged, x = Internet.users, y = Birth.rate,
color = Region, size = I(1), shape = I(15), alpha = I(0.5))
#title
qplot(data = merged, x = Internet.users, y = Birth.rate,
color = Region, size = I(1), shape = I(15), alpha = I(0.5), main = "Birth Rate vs Internet Users")
#Execute below code to generate three new vectors
Country_Code <- c("ABW","AFG","AGO","ALB","ARE","ARG","ARM","ATG","AUS","AUT","AZE","BDI","BEL","BEN","BFA","BGD","BGR","BHR","BHS","BIH","BLR","BLZ","BOL","BRA","BRB","BRN","BTN","BWA","CAF","CAN","CHE","CHL","CHN","CIV","CMR","COG","COL","COM","CPV","CRI","CUB","CYP","CZE","DEU","DJI","DNK","DOM","DZA","ECU","EGY","ERI","ESP","EST","ETH","FIN","FJI","FRA","FSM","GAB","GBR","GEO","GHA","GIN","GMB","GNB","GNQ","GRC","GRD","GTM","GUM","GUY","HKG","HND","HRV","HTI","HUN","IDN","IND","IRL","IRN","IRQ","ISL","ITA","JAM","JOR","JPN","KAZ","KEN","KGZ","KHM","KIR","KOR","KWT","LAO","LBN","LBR","LBY","LCA","LKA","LSO","LTU","LUX","LVA","MAC","MAR","MDA","MDG","MDV","MEX","MKD","MLI","MLT","MMR","MNE","MNG","MOZ","MRT","MUS","MWI","MYS","NAM","NCL","NER","NGA","NIC","NLD","NOR","NPL","NZL","OMN","PAK","PAN","PER","PHL","PNG","POL","PRI","PRT","PRY","PYF","QAT","ROU","RUS","RWA","SAU","SDN","SEN","SGP","SLB","SLE","SLV","SOM","SSD","STP","SUR","SVK","SVN","SWE","SWZ","SYR","TCD","TGO","THA","TJK","TKM","TLS","TON","TTO","TUN","TUR","TZA","UGA","UKR","URY","USA","UZB","VCT","VEN","VIR","VNM","VUT","WSM","YEM","ZAF","COD","ZMB","ZWE")
Life_Expectancy_At_Birth_1960 <- c(65.5693658536586,32.328512195122,32.9848292682927,62.2543658536585,52.2432195121951,65.2155365853659,65.8634634146342,61.7827317073171,70.8170731707317,68.5856097560976,60.836243902439,41.2360487804878,69.7019512195122,37.2782682926829,34.4779024390244,45.8293170731707,69.2475609756098,52.0893658536585,62.7290487804878,60.2762195121951,67.7080975609756,59.9613658536585,42.1183170731707,54.2054634146342,60.7380487804878,62.5003658536585,32.3593658536585,50.5477317073171,36.4826341463415,71.1331707317073,71.3134146341463,57.4582926829268,43.4658048780488,36.8724146341463,41.523756097561,48.5816341463415,56.716756097561,41.4424390243903,48.8564146341463,60.5761951219512,63.9046585365854,69.5939268292683,70.3487804878049,69.3129512195122,44.0212682926829,72.1765853658537,51.8452682926829,46.1351219512195,53.215,48.0137073170732,37.3629024390244,69.1092682926829,67.9059756097561,38.4057073170732,68.819756097561,55.9584878048781,69.8682926829268,57.5865853658537,39.5701219512195,71.1268292682927,63.4318536585366,45.8314634146342,34.8863902439024,32.0422195121951,37.8404390243902,36.7330487804878,68.1639024390244,59.8159268292683,45.5316341463415,61.2263414634146,60.2787317073171,66.9997073170732,46.2883170731707,64.6086585365854,42.1000975609756,68.0031707317073,48.6403170731707,41.1719512195122,69.691756097561,44.945512195122,48.0306829268293,73.4286585365854,69.1239024390244,64.1918292682927,52.6852682926829,67.6660975609756,58.3675853658537,46.3624146341463,56.1280731707317,41.2320243902439,49.2159756097561,53.0013170731707,60.3479512195122,43.2044634146342,63.2801219512195,34.7831707317073,42.6411951219512,57.303756097561,59.7471463414634,46.5107073170732,69.8473170731707,68.4463902439024,69.7868292682927,64.6609268292683,48.4466341463415,61.8127804878049,39.9746829268293,37.2686341463415,57.0656341463415,60.6228048780488,28.2116097560976,67.6017804878049,42.7363902439024,63.7056097560976,48.3688048780488,35.0037073170732,43.4830975609756,58.7452195121951,37.7736341463415,59.4753414634146,46.8803902439024,58.6390243902439,35.5150487804878,37.1829512195122,46.9988292682927,73.3926829268293,73.549756097561,35.1708292682927,71.2365853658537,42.6670731707317,45.2904634146342,60.8817073170732,47.6915853658537,57.8119268292683,38.462243902439,67.6804878048781,68.7196097560976,62.8089268292683,63.7937073170732,56.3570487804878,61.2060731707317,65.6424390243903,66.0552926829268,42.2492926829268,45.6662682926829,48.1876341463415,38.206,65.6598292682927,49.3817073170732,30.3315365853659,49.9479268292683,36.9658780487805,31.6767073170732,50.4513658536585,59.6801219512195,69.9759268292683,68.9780487804878,73.0056097560976,44.2337804878049,52.768243902439,38.0161219512195,40.2728292682927,54.6993170731707,56.1535365853659,54.4586829268293,33.7271219512195,61.3645365853659,62.6575853658537,42.009756097561,45.3844146341463,43.6538780487805,43.9835609756098,68.2995365853659,67.8963902439025,69.7707317073171,58.8855365853659,57.7238780487805,59.2851219512195,63.7302195121951,59.0670243902439,46.4874878048781,49.969512195122,34.3638048780488,49.0362926829268,41.0180487804878,45.1098048780488,51.5424634146342)
Life_Expectancy_At_Birth_2013 <- c(75.3286585365854,60.0282682926829,51.8661707317073,77.537243902439,77.1956341463415,75.9860975609756,74.5613658536585,75.7786585365854,82.1975609756098,80.890243902439,70.6931463414634,56.2516097560976,80.3853658536585,59.3120243902439,58.2406341463415,71.245243902439,74.4658536585366,76.5459512195122,75.0735365853659,76.2769268292683,72.4707317073171,69.9820487804878,67.9134390243903,74.1224390243903,75.3339512195122,78.5466585365854,69.1029268292683,64.3608048780488,49.8798780487805,81.4011219512195,82.7487804878049,81.1979268292683,75.3530243902439,51.2084634146342,55.0418048780488,61.6663902439024,73.8097317073171,62.9321707317073,72.9723658536585,79.2252195121951,79.2563902439025,79.9497804878049,78.2780487804878,81.0439024390244,61.6864634146342,80.3024390243903,73.3199024390244,74.5689512195122,75.648512195122,70.9257804878049,63.1778780487805,82.4268292682927,76.4243902439025,63.4421951219512,80.8317073170732,69.9179268292683,81.9682926829268,68.9733902439024,63.8435853658537,80.9560975609756,74.079512195122,61.1420731707317,58.216487804878,59.9992682926829,54.8384146341464,57.2908292682927,80.6341463414634,73.1935609756098,71.4863902439024,78.872512195122,66.3100243902439,83.8317073170732,72.9428536585366,77.1268292682927,62.4011463414634,75.2682926829268,68.7046097560976,67.6604146341463,81.0439024390244,75.1259756097561,69.4716829268293,83.1170731707317,82.290243902439,73.4689268292683,73.9014146341463,83.3319512195122,70.45,60.9537804878049,70.2024390243902,67.7720487804878,65.7665853658537,81.459756097561,74.462756097561,65.687243902439,80.1288780487805,60.5203902439024,71.6576829268293,74.9127073170732,74.2402926829268,49.3314634146342,74.1634146341464,81.7975609756098,73.9804878048781,80.3391463414634,73.7090487804878,68.811512195122,64.6739024390244,76.6026097560976,76.5326585365854,75.1870487804878,57.5351951219512,80.7463414634146,65.6540975609756,74.7583658536585,69.0618048780488,54.641512195122,62.8027073170732,74.46,61.466,74.567512195122,64.3438780487805,77.1219512195122,60.8281463414634,52.4421463414634,74.514756097561,81.1048780487805,81.4512195121951,69.222,81.4073170731707,76.8410487804878,65.9636829268293,77.4192195121951,74.2838536585366,68.1315609756097,62.4491707317073,76.8487804878049,78.7111951219512,80.3731707317073,72.7991707317073,76.3340731707317,78.4184878048781,74.4634146341463,71.0731707317073,63.3948292682927,74.1776341463415,63.1670487804878,65.878756097561,82.3463414634146,67.7189268292683,50.3631219512195,72.4981463414634,55.0230243902439,55.2209024390244,66.259512195122,70.99,76.2609756097561,80.2780487804878,81.7048780487805,48.9379268292683,74.7157804878049,51.1914878048781,59.1323658536585,74.2469268292683,69.4001707317073,65.4565609756098,67.5223658536585,72.6403414634147,70.3052926829268,73.6463414634147,75.1759512195122,64.2918292682927,57.7676829268293,71.159512195122,76.8361951219512,78.8414634146341,68.2275853658537,72.8108780487805,74.0744146341464,79.6243902439024,75.756487804878,71.669243902439,73.2503902439024,63.583512195122,56.7365853658537,58.2719268292683,59.2373658536585,55.633)
#(c) Kirill Eremenko, www.superdatascience.com
#(c) Kirill Eremenko, www.superdatascience.com
life.expectancy <- data.frame(Country_Code, Life_Expectancy_At_Birth_1960, Life_Expectancy_At_Birth_2013)
head(life.expectancy)
fertility <- read.csv("/Users/andimutiazz/Documents/PROJECT/course/R/sec5/P2-Section5-Homework-Data.csv")
head(fertility)
fertility.1960 <- fertility[fertility$Year == 1960,]
head(fertility.1960)
fertility.2013 <- fertility[fertility$Year == 213,]
fertility.2013 <- fertility[fertility$Year == 2013,]
fulldata <- merge(life.expectancy, fertility.1960, fertility.2013, by.x = "Country_Code", by.y = "Country.Code")
fulldata
head(fulldata)
str(fertility.1960)
fertility.data <- merge(fertility.1960, fertility.2013, by.x = "Country.Code", by.y = "Country.Code")
head(fertility.data)
fertility.data$Country.Name.y, fertility.data$Country.Name.y, fertility.data$Region.y <- NULL
c(fertility.data$Country.Name.y, fertility.data$Country.Name.y, fertility.data$Region.y) <- NULL
fertility.data$Country.Name.y  <- NULL
fertility.data$Country.Name.y <- NULL
fertility.data$Region.y <- NULL
fertility.data
str(fertility.data)
,
str(fertility.data)
names(fertility.data)[Year.y] <- "Year"
names(fertility.data)["Year.y"] <- "Year"
names(fertility.data)[6] <- "Year"
str(fertility.data)
fertility.data <- data.frame(code = Country.Code, name = Country.Name.x, region = Region.x, fertility.1960 = Fertility.Rate.x, fertility.2013 = Fertility.Rate.y)
#fertility.data <- data.frame(code = Country.Code, name = Country.Name.x, region = Region.x, fertility.1960 = Fertility.Rate.x, fertility.2013 = Fertility.Rate.y)
fertility.data <- setNames(fertility.data, "Code", "country", "region", "year1", "fertility.1960", "year2", "fertility.2013")
fulldata <- merge(life.expectancy, fertility.1960, fertility.2013, by.x = "Country_Code", by.y = "Country.Code")
fertility.data <- setNames(fertility.data, c("Code", "country", "region", "year1", "fertility.1960", "year2", "fertility.2013"))
fertility.data
head(fertility.data)
fertility.data$year1 <- NULL
fertility.data$year2 <- NULL
str(fertility.data)
fulldata <- merge(life.expectancy, fertility.data, by.x = Country_Code, by.y = Code)
str(life.expectancy)
fulldata <- merge(life.expectancy, fertility.data, by.x = Country_Code, by.y = Code)
fulldata <- merge(life.expectancy, fertility.data, by.x = "Country_Code", by.y = "Code")
head(fulldata)
str(fulldata)
fulldata$Life_Expectancy_At_Birth_1960 <- fulldata$life.expectency
fulldata$Life_Expectancy_At_Birth_1960 <- fulldata$life.expectency_1960
fulldata$Life_Expectancy_At_Birth_1960 <- fulldata$life.expectency_1960
str(fulldata)
fulldata$Life_Expectancy_At_Birth_1960
fulldata$life.expectency_1960
#Execute below code to generate three new vectors
Country_Code <- c("ABW","AFG","AGO","ALB","ARE","ARG","ARM","ATG","AUS","AUT","AZE","BDI","BEL","BEN","BFA","BGD","BGR","BHR","BHS","BIH","BLR","BLZ","BOL","BRA","BRB","BRN","BTN","BWA","CAF","CAN","CHE","CHL","CHN","CIV","CMR","COG","COL","COM","CPV","CRI","CUB","CYP","CZE","DEU","DJI","DNK","DOM","DZA","ECU","EGY","ERI","ESP","EST","ETH","FIN","FJI","FRA","FSM","GAB","GBR","GEO","GHA","GIN","GMB","GNB","GNQ","GRC","GRD","GTM","GUM","GUY","HKG","HND","HRV","HTI","HUN","IDN","IND","IRL","IRN","IRQ","ISL","ITA","JAM","JOR","JPN","KAZ","KEN","KGZ","KHM","KIR","KOR","KWT","LAO","LBN","LBR","LBY","LCA","LKA","LSO","LTU","LUX","LVA","MAC","MAR","MDA","MDG","MDV","MEX","MKD","MLI","MLT","MMR","MNE","MNG","MOZ","MRT","MUS","MWI","MYS","NAM","NCL","NER","NGA","NIC","NLD","NOR","NPL","NZL","OMN","PAK","PAN","PER","PHL","PNG","POL","PRI","PRT","PRY","PYF","QAT","ROU","RUS","RWA","SAU","SDN","SEN","SGP","SLB","SLE","SLV","SOM","SSD","STP","SUR","SVK","SVN","SWE","SWZ","SYR","TCD","TGO","THA","TJK","TKM","TLS","TON","TTO","TUN","TUR","TZA","UGA","UKR","URY","USA","UZB","VCT","VEN","VIR","VNM","VUT","WSM","YEM","ZAF","COD","ZMB","ZWE")
Life_Expectancy_At_Birth_1960 <- c(65.5693658536586,32.328512195122,32.9848292682927,62.2543658536585,52.2432195121951,65.2155365853659,65.8634634146342,61.7827317073171,70.8170731707317,68.5856097560976,60.836243902439,41.2360487804878,69.7019512195122,37.2782682926829,34.4779024390244,45.8293170731707,69.2475609756098,52.0893658536585,62.7290487804878,60.2762195121951,67.7080975609756,59.9613658536585,42.1183170731707,54.2054634146342,60.7380487804878,62.5003658536585,32.3593658536585,50.5477317073171,36.4826341463415,71.1331707317073,71.3134146341463,57.4582926829268,43.4658048780488,36.8724146341463,41.523756097561,48.5816341463415,56.716756097561,41.4424390243903,48.8564146341463,60.5761951219512,63.9046585365854,69.5939268292683,70.3487804878049,69.3129512195122,44.0212682926829,72.1765853658537,51.8452682926829,46.1351219512195,53.215,48.0137073170732,37.3629024390244,69.1092682926829,67.9059756097561,38.4057073170732,68.819756097561,55.9584878048781,69.8682926829268,57.5865853658537,39.5701219512195,71.1268292682927,63.4318536585366,45.8314634146342,34.8863902439024,32.0422195121951,37.8404390243902,36.7330487804878,68.1639024390244,59.8159268292683,45.5316341463415,61.2263414634146,60.2787317073171,66.9997073170732,46.2883170731707,64.6086585365854,42.1000975609756,68.0031707317073,48.6403170731707,41.1719512195122,69.691756097561,44.945512195122,48.0306829268293,73.4286585365854,69.1239024390244,64.1918292682927,52.6852682926829,67.6660975609756,58.3675853658537,46.3624146341463,56.1280731707317,41.2320243902439,49.2159756097561,53.0013170731707,60.3479512195122,43.2044634146342,63.2801219512195,34.7831707317073,42.6411951219512,57.303756097561,59.7471463414634,46.5107073170732,69.8473170731707,68.4463902439024,69.7868292682927,64.6609268292683,48.4466341463415,61.8127804878049,39.9746829268293,37.2686341463415,57.0656341463415,60.6228048780488,28.2116097560976,67.6017804878049,42.7363902439024,63.7056097560976,48.3688048780488,35.0037073170732,43.4830975609756,58.7452195121951,37.7736341463415,59.4753414634146,46.8803902439024,58.6390243902439,35.5150487804878,37.1829512195122,46.9988292682927,73.3926829268293,73.549756097561,35.1708292682927,71.2365853658537,42.6670731707317,45.2904634146342,60.8817073170732,47.6915853658537,57.8119268292683,38.462243902439,67.6804878048781,68.7196097560976,62.8089268292683,63.7937073170732,56.3570487804878,61.2060731707317,65.6424390243903,66.0552926829268,42.2492926829268,45.6662682926829,48.1876341463415,38.206,65.6598292682927,49.3817073170732,30.3315365853659,49.9479268292683,36.9658780487805,31.6767073170732,50.4513658536585,59.6801219512195,69.9759268292683,68.9780487804878,73.0056097560976,44.2337804878049,52.768243902439,38.0161219512195,40.2728292682927,54.6993170731707,56.1535365853659,54.4586829268293,33.7271219512195,61.3645365853659,62.6575853658537,42.009756097561,45.3844146341463,43.6538780487805,43.9835609756098,68.2995365853659,67.8963902439025,69.7707317073171,58.8855365853659,57.7238780487805,59.2851219512195,63.7302195121951,59.0670243902439,46.4874878048781,49.969512195122,34.3638048780488,49.0362926829268,41.0180487804878,45.1098048780488,51.5424634146342)
Life_Expectancy_At_Birth_2013 <- c(75.3286585365854,60.0282682926829,51.8661707317073,77.537243902439,77.1956341463415,75.9860975609756,74.5613658536585,75.7786585365854,82.1975609756098,80.890243902439,70.6931463414634,56.2516097560976,80.3853658536585,59.3120243902439,58.2406341463415,71.245243902439,74.4658536585366,76.5459512195122,75.0735365853659,76.2769268292683,72.4707317073171,69.9820487804878,67.9134390243903,74.1224390243903,75.3339512195122,78.5466585365854,69.1029268292683,64.3608048780488,49.8798780487805,81.4011219512195,82.7487804878049,81.1979268292683,75.3530243902439,51.2084634146342,55.0418048780488,61.6663902439024,73.8097317073171,62.9321707317073,72.9723658536585,79.2252195121951,79.2563902439025,79.9497804878049,78.2780487804878,81.0439024390244,61.6864634146342,80.3024390243903,73.3199024390244,74.5689512195122,75.648512195122,70.9257804878049,63.1778780487805,82.4268292682927,76.4243902439025,63.4421951219512,80.8317073170732,69.9179268292683,81.9682926829268,68.9733902439024,63.8435853658537,80.9560975609756,74.079512195122,61.1420731707317,58.216487804878,59.9992682926829,54.8384146341464,57.2908292682927,80.6341463414634,73.1935609756098,71.4863902439024,78.872512195122,66.3100243902439,83.8317073170732,72.9428536585366,77.1268292682927,62.4011463414634,75.2682926829268,68.7046097560976,67.6604146341463,81.0439024390244,75.1259756097561,69.4716829268293,83.1170731707317,82.290243902439,73.4689268292683,73.9014146341463,83.3319512195122,70.45,60.9537804878049,70.2024390243902,67.7720487804878,65.7665853658537,81.459756097561,74.462756097561,65.687243902439,80.1288780487805,60.5203902439024,71.6576829268293,74.9127073170732,74.2402926829268,49.3314634146342,74.1634146341464,81.7975609756098,73.9804878048781,80.3391463414634,73.7090487804878,68.811512195122,64.6739024390244,76.6026097560976,76.5326585365854,75.1870487804878,57.5351951219512,80.7463414634146,65.6540975609756,74.7583658536585,69.0618048780488,54.641512195122,62.8027073170732,74.46,61.466,74.567512195122,64.3438780487805,77.1219512195122,60.8281463414634,52.4421463414634,74.514756097561,81.1048780487805,81.4512195121951,69.222,81.4073170731707,76.8410487804878,65.9636829268293,77.4192195121951,74.2838536585366,68.1315609756097,62.4491707317073,76.8487804878049,78.7111951219512,80.3731707317073,72.7991707317073,76.3340731707317,78.4184878048781,74.4634146341463,71.0731707317073,63.3948292682927,74.1776341463415,63.1670487804878,65.878756097561,82.3463414634146,67.7189268292683,50.3631219512195,72.4981463414634,55.0230243902439,55.2209024390244,66.259512195122,70.99,76.2609756097561,80.2780487804878,81.7048780487805,48.9379268292683,74.7157804878049,51.1914878048781,59.1323658536585,74.2469268292683,69.4001707317073,65.4565609756098,67.5223658536585,72.6403414634147,70.3052926829268,73.6463414634147,75.1759512195122,64.2918292682927,57.7676829268293,71.159512195122,76.8361951219512,78.8414634146341,68.2275853658537,72.8108780487805,74.0744146341464,79.6243902439024,75.756487804878,71.669243902439,73.2503902439024,63.583512195122,56.7365853658537,58.2719268292683,59.2373658536585,55.633)
#(c) Kirill Eremenko, www.superdatascience.com
life.expectancy <- data.frame(Country_Code, Life_Expectancy_At_Birth_1960, Life_Expectancy_At_Birth_2013)
head(life.expectancy)
fertility <- read.csv("/Users/andimutiazz/Documents/PROJECT/course/R/sec5/P2-Section5-Homework-Data.csv")
head(fertility)
fertility.1960 <- fertility[fertility$Year == 1960,]
head(fertility.1960)
fertility.2013 <- fertility[fertility$Year == 2013,]
str(fertility.1960)
fertility.data <- merge(fertility.1960, fertility.2013, by.x = "Country.Code", by.y = "Country.Code")
head(fertility.data)
fertility.data$Country.Name.y  <- NULL
fertility.data$Country.Name.y <- NULL
fertility.data$Region.y <- NULL
str(fertility.data)
names(fertility.data)[6] <- "Year"
#fertility.data <- data.frame(code = Country.Code, name = Country.Name.x, region = Region.x, fertility.1960 = Fertility.Rate.x, fertility.2013 = Fertility.Rate.y)
fertility.data <- setNames(fertility.data, c("Code", "country", "region", "year1", "fertility.1960", "year2", "fertility.2013"))
head(fertility.data)
fertility.data$year1 <- NULL
fertility.data$year2 <- NULL
str(life.expectancy)
str(fertility.data)
fulldata <- merge(life.expectancy, fertility.data, by.x = "Country_Code", by.y = "Code")
head(fulldata)
str(fulldata)
fulldata$Life_Expectancy_At_Birth_1960 <- fulldata$life.expectency
str(fulldata)
#Execute below code to generate three new vectors
Country_Code <- c("ABW","AFG","AGO","ALB","ARE","ARG","ARM","ATG","AUS","AUT","AZE","BDI","BEL","BEN","BFA","BGD","BGR","BHR","BHS","BIH","BLR","BLZ","BOL","BRA","BRB","BRN","BTN","BWA","CAF","CAN","CHE","CHL","CHN","CIV","CMR","COG","COL","COM","CPV","CRI","CUB","CYP","CZE","DEU","DJI","DNK","DOM","DZA","ECU","EGY","ERI","ESP","EST","ETH","FIN","FJI","FRA","FSM","GAB","GBR","GEO","GHA","GIN","GMB","GNB","GNQ","GRC","GRD","GTM","GUM","GUY","HKG","HND","HRV","HTI","HUN","IDN","IND","IRL","IRN","IRQ","ISL","ITA","JAM","JOR","JPN","KAZ","KEN","KGZ","KHM","KIR","KOR","KWT","LAO","LBN","LBR","LBY","LCA","LKA","LSO","LTU","LUX","LVA","MAC","MAR","MDA","MDG","MDV","MEX","MKD","MLI","MLT","MMR","MNE","MNG","MOZ","MRT","MUS","MWI","MYS","NAM","NCL","NER","NGA","NIC","NLD","NOR","NPL","NZL","OMN","PAK","PAN","PER","PHL","PNG","POL","PRI","PRT","PRY","PYF","QAT","ROU","RUS","RWA","SAU","SDN","SEN","SGP","SLB","SLE","SLV","SOM","SSD","STP","SUR","SVK","SVN","SWE","SWZ","SYR","TCD","TGO","THA","TJK","TKM","TLS","TON","TTO","TUN","TUR","TZA","UGA","UKR","URY","USA","UZB","VCT","VEN","VIR","VNM","VUT","WSM","YEM","ZAF","COD","ZMB","ZWE")
Life_Expectancy_At_Birth_1960 <- c(65.5693658536586,32.328512195122,32.9848292682927,62.2543658536585,52.2432195121951,65.2155365853659,65.8634634146342,61.7827317073171,70.8170731707317,68.5856097560976,60.836243902439,41.2360487804878,69.7019512195122,37.2782682926829,34.4779024390244,45.8293170731707,69.2475609756098,52.0893658536585,62.7290487804878,60.2762195121951,67.7080975609756,59.9613658536585,42.1183170731707,54.2054634146342,60.7380487804878,62.5003658536585,32.3593658536585,50.5477317073171,36.4826341463415,71.1331707317073,71.3134146341463,57.4582926829268,43.4658048780488,36.8724146341463,41.523756097561,48.5816341463415,56.716756097561,41.4424390243903,48.8564146341463,60.5761951219512,63.9046585365854,69.5939268292683,70.3487804878049,69.3129512195122,44.0212682926829,72.1765853658537,51.8452682926829,46.1351219512195,53.215,48.0137073170732,37.3629024390244,69.1092682926829,67.9059756097561,38.4057073170732,68.819756097561,55.9584878048781,69.8682926829268,57.5865853658537,39.5701219512195,71.1268292682927,63.4318536585366,45.8314634146342,34.8863902439024,32.0422195121951,37.8404390243902,36.7330487804878,68.1639024390244,59.8159268292683,45.5316341463415,61.2263414634146,60.2787317073171,66.9997073170732,46.2883170731707,64.6086585365854,42.1000975609756,68.0031707317073,48.6403170731707,41.1719512195122,69.691756097561,44.945512195122,48.0306829268293,73.4286585365854,69.1239024390244,64.1918292682927,52.6852682926829,67.6660975609756,58.3675853658537,46.3624146341463,56.1280731707317,41.2320243902439,49.2159756097561,53.0013170731707,60.3479512195122,43.2044634146342,63.2801219512195,34.7831707317073,42.6411951219512,57.303756097561,59.7471463414634,46.5107073170732,69.8473170731707,68.4463902439024,69.7868292682927,64.6609268292683,48.4466341463415,61.8127804878049,39.9746829268293,37.2686341463415,57.0656341463415,60.6228048780488,28.2116097560976,67.6017804878049,42.7363902439024,63.7056097560976,48.3688048780488,35.0037073170732,43.4830975609756,58.7452195121951,37.7736341463415,59.4753414634146,46.8803902439024,58.6390243902439,35.5150487804878,37.1829512195122,46.9988292682927,73.3926829268293,73.549756097561,35.1708292682927,71.2365853658537,42.6670731707317,45.2904634146342,60.8817073170732,47.6915853658537,57.8119268292683,38.462243902439,67.6804878048781,68.7196097560976,62.8089268292683,63.7937073170732,56.3570487804878,61.2060731707317,65.6424390243903,66.0552926829268,42.2492926829268,45.6662682926829,48.1876341463415,38.206,65.6598292682927,49.3817073170732,30.3315365853659,49.9479268292683,36.9658780487805,31.6767073170732,50.4513658536585,59.6801219512195,69.9759268292683,68.9780487804878,73.0056097560976,44.2337804878049,52.768243902439,38.0161219512195,40.2728292682927,54.6993170731707,56.1535365853659,54.4586829268293,33.7271219512195,61.3645365853659,62.6575853658537,42.009756097561,45.3844146341463,43.6538780487805,43.9835609756098,68.2995365853659,67.8963902439025,69.7707317073171,58.8855365853659,57.7238780487805,59.2851219512195,63.7302195121951,59.0670243902439,46.4874878048781,49.969512195122,34.3638048780488,49.0362926829268,41.0180487804878,45.1098048780488,51.5424634146342)
Life_Expectancy_At_Birth_2013 <- c(75.3286585365854,60.0282682926829,51.8661707317073,77.537243902439,77.1956341463415,75.9860975609756,74.5613658536585,75.7786585365854,82.1975609756098,80.890243902439,70.6931463414634,56.2516097560976,80.3853658536585,59.3120243902439,58.2406341463415,71.245243902439,74.4658536585366,76.5459512195122,75.0735365853659,76.2769268292683,72.4707317073171,69.9820487804878,67.9134390243903,74.1224390243903,75.3339512195122,78.5466585365854,69.1029268292683,64.3608048780488,49.8798780487805,81.4011219512195,82.7487804878049,81.1979268292683,75.3530243902439,51.2084634146342,55.0418048780488,61.6663902439024,73.8097317073171,62.9321707317073,72.9723658536585,79.2252195121951,79.2563902439025,79.9497804878049,78.2780487804878,81.0439024390244,61.6864634146342,80.3024390243903,73.3199024390244,74.5689512195122,75.648512195122,70.9257804878049,63.1778780487805,82.4268292682927,76.4243902439025,63.4421951219512,80.8317073170732,69.9179268292683,81.9682926829268,68.9733902439024,63.8435853658537,80.9560975609756,74.079512195122,61.1420731707317,58.216487804878,59.9992682926829,54.8384146341464,57.2908292682927,80.6341463414634,73.1935609756098,71.4863902439024,78.872512195122,66.3100243902439,83.8317073170732,72.9428536585366,77.1268292682927,62.4011463414634,75.2682926829268,68.7046097560976,67.6604146341463,81.0439024390244,75.1259756097561,69.4716829268293,83.1170731707317,82.290243902439,73.4689268292683,73.9014146341463,83.3319512195122,70.45,60.9537804878049,70.2024390243902,67.7720487804878,65.7665853658537,81.459756097561,74.462756097561,65.687243902439,80.1288780487805,60.5203902439024,71.6576829268293,74.9127073170732,74.2402926829268,49.3314634146342,74.1634146341464,81.7975609756098,73.9804878048781,80.3391463414634,73.7090487804878,68.811512195122,64.6739024390244,76.6026097560976,76.5326585365854,75.1870487804878,57.5351951219512,80.7463414634146,65.6540975609756,74.7583658536585,69.0618048780488,54.641512195122,62.8027073170732,74.46,61.466,74.567512195122,64.3438780487805,77.1219512195122,60.8281463414634,52.4421463414634,74.514756097561,81.1048780487805,81.4512195121951,69.222,81.4073170731707,76.8410487804878,65.9636829268293,77.4192195121951,74.2838536585366,68.1315609756097,62.4491707317073,76.8487804878049,78.7111951219512,80.3731707317073,72.7991707317073,76.3340731707317,78.4184878048781,74.4634146341463,71.0731707317073,63.3948292682927,74.1776341463415,63.1670487804878,65.878756097561,82.3463414634146,67.7189268292683,50.3631219512195,72.4981463414634,55.0230243902439,55.2209024390244,66.259512195122,70.99,76.2609756097561,80.2780487804878,81.7048780487805,48.9379268292683,74.7157804878049,51.1914878048781,59.1323658536585,74.2469268292683,69.4001707317073,65.4565609756098,67.5223658536585,72.6403414634147,70.3052926829268,73.6463414634147,75.1759512195122,64.2918292682927,57.7676829268293,71.159512195122,76.8361951219512,78.8414634146341,68.2275853658537,72.8108780487805,74.0744146341464,79.6243902439024,75.756487804878,71.669243902439,73.2503902439024,63.583512195122,56.7365853658537,58.2719268292683,59.2373658536585,55.633)
#(c) Kirill Eremenko, www.superdatascience.com
life.expectancy <- data.frame(Country_Code, Life_Expectancy_At_Birth_1960, Life_Expectancy_At_Birth_2013)
head(life.expectancy)
fertility <- read.csv("/Users/andimutiazz/Documents/PROJECT/course/R/sec5/P2-Section5-Homework-Data.csv")
head(fertility)
fertility.1960 <- fertility[fertility$Year == 1960,]
head(fertility.1960)
fertility.2013 <- fertility[fertility$Year == 2013,]
str(fertility.1960)
fertility.data <- merge(fertility.1960, fertility.2013, by.x = "Country.Code", by.y = "Country.Code")
head(fertility.data)
fertility.data$Country.Name.y  <- NULL
fertility.data$Country.Name.y <- NULL
fertility.data$Region.y <- NULL
str(fertility.data)
names(fertility.data)[6] <- "Year"
#fertility.data <- data.frame(code = Country.Code, name = Country.Name.x, region = Region.x, fertility.1960 = Fertility.Rate.x, fertility.2013 = Fertility.Rate.y)
fertility.data <- setNames(fertility.data, c("Code", "country", "region", "year1", "fertility.1960", "year2", "fertility.2013"))
head(fertility.data)
fertility.data$year1 <- NULL
fertility.data$year2 <- NULL
str(life.expectancy)
str(fertility.data)
fulldata <- merge(life.expectancy, fertility.data, by.x = "Country_Code", by.y = "Code")
head(fulldata)
str(fulldata)
#fulldata$Life_Expectancy_At_Birth_1960 <- fulldata$life.expectency
str(life.expectancy)
str(fertility.data)
str(fulldata)
names(fulldata)[1] <- "life.expectency.1960"
names(fulldata)[1] <- "life.expectency.1960"
str(fulldata)
names(fulldata)[1] <- "Code"
str(fulldata)
names(fulldata)[2] <- "life.expectancy.1960"
names(fulldata)[3] <- "life.expectancy.2013"
str(fulldata)
qplot(data = fulldata, x = life.expectancy.1960, y = fertility.1960, color = region, main = "Life Expecteancy vs Fertility in 1960")
qplot(data = fulldata, x = fertility.1960, y =  life.expectancy.1960, color = region, main = "Life Expecteancy vs Fertility in 1960")
qplot(data = fulldata, x = fertility.2013, y =  life.expectancy.2013, color = region, main = "Life Expecteancy vs Fertility in 1960")
getwd()
getwd()
#Import the csv dataset
data <- _("Section5-Homework-Data copy.csv")
data <- ("Section5-Homework-Data copy.csv")
data
getwd()
setwd("/Users/andimutiazz/Documents/PROJECT/course/R/sec5")
getwd()
getwd()
data <- ("Section5-Homework-Data copy.csv")
data
data <- read.csv("Section5-Homework-Data copy.csv")
getwd()
setwd("/Users/andimutiazz/Documents/PROJECT/course/R/sec5")
getwd()
#Import the csv dataset
data <- read.csv("P2-Section5-Homework-Data copy.csv")
data
head(data)      #check top 6 rows
tail(data, n=7) #check bottom 7 rows
str(data)      #check the structure of the data frame
summary(data)      #check the summary of the data
data1960 <- data[data$_==1960,]
#Filter the dataframes
data1960 <- data[data$Year==1960,]
data2013 <- data[data$Year==2013,]
#Check row counts
nrow(data1960) #187 rows
nrow(data2013) #187 rows. Equal split.
#Execute below code to generate three new vectors
Country_Code <- c("ABW","AFG","AGO","ALB","ARE","ARG","ARM","ATG","AUS","AUT","AZE","BDI","BEL","BEN","BFA","BGD","BGR","BHR","BHS","BIH","BLR","BLZ","BOL","BRA","BRB","BRN","BTN","BWA","CAF","CAN","CHE","CHL","CHN","CIV","CMR","COG","COL","COM","CPV","CRI","CUB","CYP","CZE","DEU","DJI","DNK","DOM","DZA","ECU","EGY","ERI","ESP","EST","ETH","FIN","FJI","FRA","FSM","GAB","GBR","GEO","GHA","GIN","GMB","GNB","GNQ","GRC","GRD","GTM","GUM","GUY","HKG","HND","HRV","HTI","HUN","IDN","IND","IRL","IRN","IRQ","ISL","ITA","JAM","JOR","JPN","KAZ","KEN","KGZ","KHM","KIR","KOR","KWT","LAO","LBN","LBR","LBY","LCA","LKA","LSO","LTU","LUX","LVA","MAC","MAR","MDA","MDG","MDV","MEX","MKD","MLI","MLT","MMR","MNE","MNG","MOZ","MRT","MUS","MWI","MYS","NAM","NCL","NER","NGA","NIC","NLD","NOR","NPL","NZL","OMN","PAK","PAN","PER","PHL","PNG","POL","PRI","PRT","PRY","PYF","QAT","ROU","RUS","RWA","SAU","SDN","SEN","SGP","SLB","SLE","SLV","SOM","SSD","STP","SUR","SVK","SVN","SWE","SWZ","SYR","TCD","TGO","THA","TJK","TKM","TLS","TON","TTO","TUN","TUR","TZA","UGA","UKR","URY","USA","UZB","VCT","VEN","VIR","VNM","VUT","WSM","YEM","ZAF","COD","ZMB","ZWE")
Life_Expectancy_At_Birth_1960 <- c(65.5693658536586,32.328512195122,32.9848292682927,62.2543658536585,52.2432195121951,65.2155365853659,65.8634634146342,61.7827317073171,70.8170731707317,68.5856097560976,60.836243902439,41.2360487804878,69.7019512195122,37.2782682926829,34.4779024390244,45.8293170731707,69.2475609756098,52.0893658536585,62.7290487804878,60.2762195121951,67.7080975609756,59.9613658536585,42.1183170731707,54.2054634146342,60.7380487804878,62.5003658536585,32.3593658536585,50.5477317073171,36.4826341463415,71.1331707317073,71.3134146341463,57.4582926829268,43.4658048780488,36.8724146341463,41.523756097561,48.5816341463415,56.716756097561,41.4424390243903,48.8564146341463,60.5761951219512,63.9046585365854,69.5939268292683,70.3487804878049,69.3129512195122,44.0212682926829,72.1765853658537,51.8452682926829,46.1351219512195,53.215,48.0137073170732,37.3629024390244,69.1092682926829,67.9059756097561,38.4057073170732,68.819756097561,55.9584878048781,69.8682926829268,57.5865853658537,39.5701219512195,71.1268292682927,63.4318536585366,45.8314634146342,34.8863902439024,32.0422195121951,37.8404390243902,36.7330487804878,68.1639024390244,59.8159268292683,45.5316341463415,61.2263414634146,60.2787317073171,66.9997073170732,46.2883170731707,64.6086585365854,42.1000975609756,68.0031707317073,48.6403170731707,41.1719512195122,69.691756097561,44.945512195122,48.0306829268293,73.4286585365854,69.1239024390244,64.1918292682927,52.6852682926829,67.6660975609756,58.3675853658537,46.3624146341463,56.1280731707317,41.2320243902439,49.2159756097561,53.0013170731707,60.3479512195122,43.2044634146342,63.2801219512195,34.7831707317073,42.6411951219512,57.303756097561,59.7471463414634,46.5107073170732,69.8473170731707,68.4463902439024,69.7868292682927,64.6609268292683,48.4466341463415,61.8127804878049,39.9746829268293,37.2686341463415,57.0656341463415,60.6228048780488,28.2116097560976,67.6017804878049,42.7363902439024,63.7056097560976,48.3688048780488,35.0037073170732,43.4830975609756,58.7452195121951,37.7736341463415,59.4753414634146,46.8803902439024,58.6390243902439,35.5150487804878,37.1829512195122,46.9988292682927,73.3926829268293,73.549756097561,35.1708292682927,71.2365853658537,42.6670731707317,45.2904634146342,60.8817073170732,47.6915853658537,57.8119268292683,38.462243902439,67.6804878048781,68.7196097560976,62.8089268292683,63.7937073170732,56.3570487804878,61.2060731707317,65.6424390243903,66.0552926829268,42.2492926829268,45.6662682926829,48.1876341463415,38.206,65.6598292682927,49.3817073170732,30.3315365853659,49.9479268292683,36.9658780487805,31.6767073170732,50.4513658536585,59.6801219512195,69.9759268292683,68.9780487804878,73.0056097560976,44.2337804878049,52.768243902439,38.0161219512195,40.2728292682927,54.6993170731707,56.1535365853659,54.4586829268293,33.7271219512195,61.3645365853659,62.6575853658537,42.009756097561,45.3844146341463,43.6538780487805,43.9835609756098,68.2995365853659,67.8963902439025,69.7707317073171,58.8855365853659,57.7238780487805,59.2851219512195,63.7302195121951,59.0670243902439,46.4874878048781,49.969512195122,34.3638048780488,49.0362926829268,41.0180487804878,45.1098048780488,51.5424634146342)
Life_Expectancy_At_Birth_2013 <- c(75.3286585365854,60.0282682926829,51.8661707317073,77.537243902439,77.1956341463415,75.9860975609756,74.5613658536585,75.7786585365854,82.1975609756098,80.890243902439,70.6931463414634,56.2516097560976,80.3853658536585,59.3120243902439,58.2406341463415,71.245243902439,74.4658536585366,76.5459512195122,75.0735365853659,76.2769268292683,72.4707317073171,69.9820487804878,67.9134390243903,74.1224390243903,75.3339512195122,78.5466585365854,69.1029268292683,64.3608048780488,49.8798780487805,81.4011219512195,82.7487804878049,81.1979268292683,75.3530243902439,51.2084634146342,55.0418048780488,61.6663902439024,73.8097317073171,62.9321707317073,72.9723658536585,79.2252195121951,79.2563902439025,79.9497804878049,78.2780487804878,81.0439024390244,61.6864634146342,80.3024390243903,73.3199024390244,74.5689512195122,75.648512195122,70.9257804878049,63.1778780487805,82.4268292682927,76.4243902439025,63.4421951219512,80.8317073170732,69.9179268292683,81.9682926829268,68.9733902439024,63.8435853658537,80.9560975609756,74.079512195122,61.1420731707317,58.216487804878,59.9992682926829,54.8384146341464,57.2908292682927,80.6341463414634,73.1935609756098,71.4863902439024,78.872512195122,66.3100243902439,83.8317073170732,72.9428536585366,77.1268292682927,62.4011463414634,75.2682926829268,68.7046097560976,67.6604146341463,81.0439024390244,75.1259756097561,69.4716829268293,83.1170731707317,82.290243902439,73.4689268292683,73.9014146341463,83.3319512195122,70.45,60.9537804878049,70.2024390243902,67.7720487804878,65.7665853658537,81.459756097561,74.462756097561,65.687243902439,80.1288780487805,60.5203902439024,71.6576829268293,74.9127073170732,74.2402926829268,49.3314634146342,74.1634146341464,81.7975609756098,73.9804878048781,80.3391463414634,73.7090487804878,68.811512195122,64.6739024390244,76.6026097560976,76.5326585365854,75.1870487804878,57.5351951219512,80.7463414634146,65.6540975609756,74.7583658536585,69.0618048780488,54.641512195122,62.8027073170732,74.46,61.466,74.567512195122,64.3438780487805,77.1219512195122,60.8281463414634,52.4421463414634,74.514756097561,81.1048780487805,81.4512195121951,69.222,81.4073170731707,76.8410487804878,65.9636829268293,77.4192195121951,74.2838536585366,68.1315609756097,62.4491707317073,76.8487804878049,78.7111951219512,80.3731707317073,72.7991707317073,76.3340731707317,78.4184878048781,74.4634146341463,71.0731707317073,63.3948292682927,74.1776341463415,63.1670487804878,65.878756097561,82.3463414634146,67.7189268292683,50.3631219512195,72.4981463414634,55.0230243902439,55.2209024390244,66.259512195122,70.99,76.2609756097561,80.2780487804878,81.7048780487805,48.9379268292683,74.7157804878049,51.1914878048781,59.1323658536585,74.2469268292683,69.4001707317073,65.4565609756098,67.5223658536585,72.6403414634147,70.3052926829268,73.6463414634147,75.1759512195122,64.2918292682927,57.7676829268293,71.159512195122,76.8361951219512,78.8414634146341,68.2275853658537,72.8108780487805,74.0744146341464,79.6243902439024,75.756487804878,71.669243902439,73.2503902439024,63.583512195122,56.7365853658537,58.2719268292683,59.2373658536585,55.633)
add1960 <- data.frame(Code= Country_Code, Life.Exp= Life_Expectancy_At_Birth_1960)
add2013 <- data.frame(Code=Country_Code, Life.Exp=Life_Expectancy_At_Birth_2013)
#Check summaries
summary(add1960)
summary(add2013)
merged1960 <- merge(data1960, add1960, by.x="Country.Code", by.y ="Code")
merged1960 <- merge(data1960, add1960, by.x="Country.Code", by.y ="Code")
merged2013 <- merge(data2013, add2013, by.x="Country.Code", by.y="Code")
str(merged1960)
str(merged2013)
merged1960$Year <- NULL
merged2013$Year <- NULL
str(merged1960)
str(merged2013)
qplot(data=merged1960, x=Fertility.Rate, y=Life.Exp,
color=Region,                               #colour
size=I(5),
alpha=I(0.6),                               #transparency
main="Life Expectancy vs Fertility (1960)" #title
)
#Visualize the 1960 dataset
qplot(data=merged1960, x=Fertility.Rate, y=Life.Exp,
color=Region,                               #colour
size=I(1),
alpha=I(0.6),                               #transparency
main="Life Expectancy vs Fertility (1960)" #title
)
#Visualize the 2013 dataset
qplot(data=merged2013, x = Fertility.Rate, y=Life.Exp,
color=Region,
size = I(1),
alpha = I(0.6),
main = "Life Expectancy vs Fertility (2013)"
)
